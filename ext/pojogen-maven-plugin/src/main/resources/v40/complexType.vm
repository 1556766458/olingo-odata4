#*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *#
@Namespace("$namespace")
@ComplexType(name = "$complexType.Name",
        isOpenType = $complexType.isOpenType(),
        isAbstract = $complexType.Abstract#if($complexType.getBaseType()),
        baseType = "$complexType.getBaseType().getFullQualifiedName().toString()"#end)
public interface $utility.capitalize($complexType.Name) 
    extends #if($complexType.getBaseType())$utility.getJavaType($complexType.getBaseType().getFullQualifiedName().toString())#{else}Serializable#end {

#set( $complexProps = [] )
#foreach($propertyName in $complexType.PropertyNames)
    #set($property = $complexType.getProperty($propertyName))

    @Property(name = "$property.Name", 
                type = "$property.Type", 
                nullable = $property.Nullable,
                defaultValue = "#if($property.getDefaultValue())$property.getDefaultValue()#end",
                maxLenght = #if($property.getMaxLength() && !$property.getMaxLength().equalsIgnoreCase("max"))$property.getMaxLength()#{else}Integer.MAX_VALUE#end,
                fixedLenght = #if($property.isFixedLength())$property.isFixedLength()#{else}false#end,
                precision = #if($property.getPrecision())$property.getPrecision()#{else}0#end,
                scale = #if($property.getScale())$property.getScale()#{else}0#end,
                unicode = #if($property.isUnicode())$property.isUnicode()#{else}false#end,
                collation = "#if($property.getCollation())$property.getCollation()#end",
                srid = "#if($property.getSRID())$property.getSRID()#end")
    $utility.getJavaType($property.Type, $property.Collection) get$utility.capitalize($property.Name)();

    void set$utility.capitalize($property.Name)($utility.getJavaType($property.Type, $property.Collection) _$utility.uncapitalize($property.Name));

    #if($utility.isComplex($property.Type.FullQualifiedName))#*
      *##set( $adding = $complexProps.add($property) )
    #end

#end

#foreach($propertyName in $complexType.NavigationPropertyNames)
    #set($property = $complexType.getNavigationProperty($propertyName))
    #set( $type = $utility.getNavigationType($property) )
    #set( $binding = $utility.getNavigationBindingDetails($complexType, $property) )

    @NavigationProperty(name = "$property.Name", 
                type = "$type", 
                targetSchema = "$binding.Schema.Namespace", 
                targetContainer = "#if($binding.Container)$binding.Container.Name#end", 
                targetEntitySet = "#if($binding.EntitySet)$binding.EntitySet.Name#end")
    $utility.getJavaType($type, $property.Collection) get$utility.capitalize($property.Name)();

    void set$utility.capitalize($property.Name)($utility.getJavaType($type, $property.Collection) _$utility.uncapitalize($property.Name));

#end

#if( $complexProps.size() > 0 )
    #if( $complexType.baseType )
    @Override
    #end
    ComplexFactory factory();

    interface ComplexFactory #if( $complexType.baseType )
           extends ${utility.getJavaType($complexType.getBaseType())}.ComplexFactory#end{
    #foreach($property in $complexProps)
         @Property(name = "$property.Name",
                   type = "$property.Type.FullQualifiedName.toString()")
         $utility.getJavaType($property.Type) new$utility.capitalize($property.Name)();

    #end
    }
#end
