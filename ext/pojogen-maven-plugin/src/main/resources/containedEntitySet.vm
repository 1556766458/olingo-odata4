#*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *#
package ${package};

import org.apache.olingo.ext.proxy.api.AbstractEntitySet;
import org.apache.olingo.ext.proxy.api.annotations.EntitySet;
import org.apache.olingo.ext.proxy.api.annotations.CompoundKey;
import org.apache.olingo.ext.proxy.api.annotations.CompoundKeyElement;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

import org.apache.olingo.commons.api.edm.geo.Geospatial;
import org.apache.olingo.commons.api.edm.geo.GeospatialCollection;
import org.apache.olingo.commons.api.edm.geo.LineString;
import org.apache.olingo.commons.api.edm.geo.MultiLineString;
import org.apache.olingo.commons.api.edm.geo.MultiPoint;
import org.apache.olingo.commons.api.edm.geo.MultiPolygon;
import org.apache.olingo.commons.api.edm.geo.Point;
import org.apache.olingo.commons.api.edm.geo.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;
import java.util.Calendar;
import javax.xml.datatype.Duration;

#set( $keys = $utility.getEntityKeyType($navProp) )
#if( $keys.size() > 1 )
  #set( $type = $utility.getEdmType($navProp).EntityType.Name + "Key" )
#elseif( $keys.size() == 1 )
  #set( $type = $keys.values().iterator().next() )
#else
  #set( $type = "" )
#end

@EntitySet(name = "$navProp.Name", contained = true)
public interface $utility.capitalize($navProp.Name) 
  extends AbstractEntitySet<$utility.getJavaType($navProp.Type), $type, $utility.getJavaType($navProp.Type)Collection> {

#foreach( $dos in $utility.getDescendantsOrSelf($utility.getEdmType($navProp)) )
    #set( $djt = $utility.getJavaType($dos) )
    #set( $sIdx = $djt.lastIndexOf('.') + 1 )
    $djt new$djt.substring($sIdx)();
    ${djt}Collection new$djt.substring($sIdx)Collection();
#end
}
