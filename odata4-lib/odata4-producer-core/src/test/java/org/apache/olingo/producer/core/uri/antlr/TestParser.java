/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 ******************************************************************************/
package org.apache.olingo.producer.core.uri.antlr;

import org.apache.olingo.producer.core.testutil.ParserValidator;
import org.junit.Test;

/**
 * The class {@link TestParser} contains regression tests which work directly on the
 * output of the parser (which is generated by ANTLR). These tests should only test the
 * parser and must NOT require any EDM in order to ensure that the parser can run in a
 * context free manner.
 * The single test cases are written according the ABNF (not the parser) since we
 * want if the parser works as defined in the ABNF.
 */
public class TestParser {

  private ParserValidator test = null;

  public TestParser() {
    test = new ParserValidator();
  }

  // ;------------------------------------------------------------------------------
  // ; 0. URI
  // ;------------------------------------------------------------------------------
  @Test
  public void testUri() {
    // Test parser rule odataRelativeUri
    test.run("$batch").isText("odataRelativeUriEOF(odataRelativeUri($batch) <EOF>)");

    // TODO do more tests on entity
    test.run("$entity?$id=ODI").isText("odataRelativeUriEOF(odataRelativeUri($entity ? entityOptions($id=ODI)) <EOF>)");

    // TODO do more tests on entity
    test.run("$metadata").isText("odataRelativeUriEOF(odataRelativeUri($metadata) <EOF>)");

    test.run("ODI").isText(
        "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment(odataIdentifier(ODI))))) <EOF>)");

    // Test parser rule resourcePath
    test.run("$all").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath($all)) <EOF>)");

    test.run("$crossjoin(ODI)").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath("
        + "crossjoin($crossjoin ( odataIdentifier(ODI) )))) <EOF>)");

    // Test parser rule pathSegments
    test.run("ODI/ODI").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(odataIdentifier(ODI)) / "
        + "pathSegment(odataIdentifier(ODI))))) <EOF>)");
    test.run("NS.ODI/NS.ODI").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(namespace(odataIdentifier(NS) .) odataIdentifier(ODI)) / "
        + "pathSegment(namespace(odataIdentifier(NS) .) odataIdentifier(ODI))))) <EOF>)");
    test.run("NS.ODI/ODI/NS.ODI").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(namespace(odataIdentifier(NS) .) odataIdentifier(ODI)) / "
        + "pathSegment(odataIdentifier(ODI)) / "
        + "pathSegment(namespace(odataIdentifier(NS) .) odataIdentifier(ODI))))) <EOF>)");
    // Test parser rule constSegment
    test.run("ODI/$value").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(odataIdentifier(ODI)) "
        + "constSegment(/ $value)))) <EOF>)");
    test.run("ODI/$count").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(odataIdentifier(ODI)) "
        + "constSegment(/ $count)))) <EOF>)");
    test.run("ODI/$ref").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(odataIdentifier(ODI)) "
        + "constSegment(/ $ref)))) <EOF>)");

    // Test parser rule pathSegment
    test.run("NS.ODI")
        .isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
            + "namespace(odataIdentifier(NS) .) odataIdentifier(ODI))))) <EOF>)");
    test.run("ODI(1)")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI) nameValueOptList(valueOnly(( primitiveLiteral(1) ))))))) <EOF>)");

    test.run("ODI('ABC')")
        .isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
            + "odataIdentifier(ODI) "
            + "nameValueOptList(valueOnly(( primitiveLiteral(string('ABC')) ))))))) <EOF>)");
    test.run("ODI(K1=1)")
        .isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
            + "odataIdentifier(ODI) "
            + "nameValueOptList(nameValueList(( nameValuePair(odataIdentifier(K1) = "
            + "primitiveLiteral(1)) ))))))) <EOF>)");

    test.run("ODI(K1='ABC')")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI) "
                + "nameValueOptList(nameValueList(( nameValuePair(odataIdentifier(K1) = "
                + "primitiveLiteral(string('ABC'))) ))))))) <EOF>)");

    test.run("ODI(K1='ABC',K2=123)")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI) nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(K1) = primitiveLiteral(string('ABC'))) , "
                + "nameValuePair(odataIdentifier(K2) = primitiveLiteral(123)) ))))))) <EOF>)");

    test.run("ODI(K1=1)(P1=1)")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI) nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(K1) = primitiveLiteral(1)) ))) nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(P1) = primitiveLiteral(1)) ))))))) <EOF>)");

    test.run("ODI(K1='ABC',K2=123)(P1='ABC',P2=123)")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI) nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(K1) = primitiveLiteral(string('ABC'))) , "
                + "nameValuePair(odataIdentifier(K2) = primitiveLiteral(123)) ))) "
                + "nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(P1) = primitiveLiteral(string('ABC'))) , "
                + "nameValuePair(odataIdentifier(P2) = primitiveLiteral(123)) ))))))) <EOF>)");

    test.run("NS.ODI(K1='ABC',K2=123)(P1='ABC',P2=123)")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "namespace(odataIdentifier(NS) .) "
                + "odataIdentifier(ODI) nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(K1) = primitiveLiteral(string('ABC'))) , "
                + "nameValuePair(odataIdentifier(K2) = primitiveLiteral(123)) ))) "
                + "nameValueOptList(nameValueList(( "
                + "nameValuePair(odataIdentifier(P1) = primitiveLiteral(string('ABC'))) , "
                + "nameValuePair(odataIdentifier(P2) = primitiveLiteral(123)) ))))))) <EOF>)");

    test.run("ODI(K1=@ABC)").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments("
        + "pathSegment(odataIdentifier(ODI) nameValueOptList(nameValueList(( "
        + "nameValuePair(odataIdentifier(K1) = @ odataIdentifier(ABC)) ))))))) <EOF>)");
    test.run("ODI(K1=1,K2=@ABC)").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath("
        + "pathSegments(pathSegment(odataIdentifier(ODI) nameValueOptList(nameValueList(( "
        + "nameValuePair(odataIdentifier(K1) = primitiveLiteral(1)) , "
        + "nameValuePair(odataIdentifier(K2) = @ odataIdentifier(ABC)) ))))))) <EOF>)");

  }

  // TODO error testing
  @Test
  public void testUriError() {
    // test.run("$entity").isExType(InputMismatchException.class);
    // test.run("$entity").isText("");
  }

  // ;------------------------------------------------------------------------------
  // ; 2. Query Options
  // ;------------------------------------------------------------------------------

  @Test
  public void testQueryOptions() {

    // Test parser rule expand
    test.run("ODI?$expand=*").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem(*))))))) <EOF>)");

    test.run("ODI?$expand=*,*,*").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(*) , "
        + "expandItem(*) , "
        + "expandItem(*))))))) <EOF>)");

    test.run("ODI?$expand=*/$ref").isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(* / $ref))))))) <EOF>)");

    test.run("ODI?$expand=*/$ref,*,*/$ref").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem(* / $ref) , "
        + "expandItem(*) , "
        + "expandItem(* / $ref))))))) <EOF>)");

    // Test parser rules expand -> levels
    test.run("ODI?$expand=*($levels=12)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(* ( $levels=12 )))))))) <EOF>)");
    test.run("ODI?$expand=*($levels=max)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(* ( $levels=max )))))))) <EOF>)");

    // Test parser rules expand -> expandPath
    test.run("ODI?$expand=ODI").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem("
        + "expandPath(odataIdentifier(ODI))))))))) <EOF>)");

    test.run("ODI?$expand=NS.ODI").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem("
        + "expandPath(namespace(odataIdentifier(NS) .) odataIdentifier(ODI))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/NS.ODI").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem("
        + "expandPath("
        + "odataIdentifier(ODI) / "
        + "namespace(odataIdentifier(NS) .) odataIdentifier(ODI))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/NS.ODI/ODI").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList(expandItem("
        + "expandPath("
        + "odataIdentifier(ODI) / "
        + "namespace(odataIdentifier(NS) .) odataIdentifier(ODI) / "
        + "odataIdentifier(ODI))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/$ref").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(/ $ref)))))))) <EOF>)");

    // Test options for expand items
    test.run("ODI?$expand=ODI/$ref($skip=1)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(/ $ref ( "
        + "expandRefOption(skip($skip=1)) ))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/$count").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) "
        + "expandPathExtension(/ $count)))))))) <EOF>)");

    test.run("ODI?$expand=ODI/$count($filter=1)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(/ $count ( "
        + "expandCountOption("
        + "filter($filter = commonExpr(primitiveLiteral(1)))) ))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/$count($search=\"abc\")").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(/ $count ( "
        + "expandCountOption("
        + "search($search searchSpecialToken(= searchExpr(searchPhrase(\"abc\"))))) ))))))))) <EOF>)");

    test.run("ODI?$expand=ODI/$ref($skip=1;$filter=true)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(/ $ref ( "
        + "expandRefOption(skip($skip=1)) ; "
        + "expandRefOption(expandCountOption("
        + "filter($filter = commonExpr(primitiveLiteral(booleanNonCase(true)))))) ))))))))) <EOF>)");

    test.run("ODI?$expand=ODI($skip=1;$filter=true)").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment("
        + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
        + "expand($expand = expandItemList("
        + "expandItem(expandPath(odataIdentifier(ODI)) expandPathExtension(( "
        + "expandOption(expandRefOption(skip($skip=1))) ; "
        + "expandOption(expandRefOption(expandCountOption("
        + "filter($filter = commonExpr(primitiveLiteral(booleanNonCase(true))))))) ))))))))) <EOF>)");

    // Test parser rule filter ( more filter test in method testExpressions)
    test.run("ODI?$filter=true")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri("
                + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
                + "queryOption(systemQueryOption(filter($filter = commonExpr("
                + "primitiveLiteral(booleanNonCase(true)))))))) <EOF>)");

    // test.run("ODI").isText("");
  };

  @Test
  public void testExpressions() {
    // Test parser rule commonExpr -> primitiveLiteral
    test.run("ODI?$filter=null").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? "
        + "queryOptions(queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(nullrule(null)))))))) <EOF>)");

    test.run("ODI?$filter=true").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(booleanNonCase(true)))))))) <EOF>)");

    test.run("ODI?$filter=false").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(booleanNonCase(false)))))))) <EOF>)");

    test.run("ODI?$filter=1").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(1))))))) <EOF>)");

    test.run("ODI?$filter=-1").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(-1))))))) <EOF>)");

    test.run("ODI?$filter=1.1").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(1.1))))))) <EOF>)");

    test.run("ODI?$filter=-1.2").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(-1.2))))))) <EOF>)");

    test.run("ODI?$filter=-1.2e3").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(-1.2e3))))))) <EOF>)");

    test.run("ODI?$filter=-1.2e-3").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(-1.2e-3))))))) <EOF>)");

    test.run("ODI?$filter=X'12AB'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(X'12AB'))))))) <EOF>)");

    test.run("ODI?$filter=binary'12AB'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(binary'12AB'))))))) <EOF>)");

    test.run("ODI?$filter=BiNaRy'12AB'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(BiNaRy'12AB'))))))) <EOF>)");

    test.run("ODI?$filter=date'2013-11-15'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(date'2013-11-15'))))))) <EOF>)");

    test.run("ODI?$filter=datetimeoffset'2013-11-15T13:35Z'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(datetimeoffset'2013-11-15T13:35Z'))))))) <EOF>)");

    test.run("ODI?$filter=duration'PT67S'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(duration'PT67S'))))))) <EOF>)");

    test.run("ODI?$filter=guid'1234ABCD-12AB-23CD-45EF-123456780ABC'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(guid'1234ABCD-12AB-23CD-45EF-123456780ABC'))))))) <EOF>)");

    test.run("ODI?$filter='ABC'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(string('ABC')))))))) <EOF>)");

    test.run("ODI?$filter=timeofday'20:00'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(timeofday'20:00'))))))) <EOF>)");

    // Test enum
    test.run("ODI?$filter=NS.ODI'1'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(enumX(namespace(odataIdentifier(NS) .) odataIdentifier(ODI) '1')))))))) <EOF>)");
    test.run("ODI?$filter=NS.ODI'1,3'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(enumX(namespace(odataIdentifier(NS) .) odataIdentifier(ODI) '1,3')))))))) <EOF>)");
    test.run("ODI?$filter=NS.ODI'ODI,3'").isText("odataRelativeUriEOF(odataRelativeUri("
        + "resourcePath(pathSegments(pathSegment(odataIdentifier(ODI)))) ? queryOptions("
        + "queryOption(systemQueryOption(filter($filter = commonExpr("
        + "primitiveLiteral(enumX(namespace(odataIdentifier(NS) .) odataIdentifier(ODI) 'ODI,3')))))))) <EOF>)");

    // Test Geometry

    // Rule GeographyCollection
    test.run("ODI?$filter=geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'")
        .isText("odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
            + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
            + "filter($filter = commonExpr(primitiveLiteral(geographyCollection("
            + "geography' fullCollectionLiteral(sridLiteral(SRID = 0 ;) collectionLiteral("
            + "Collection ( geoLiteral(lineStringLiteral("
            + "LineString lineStringData(( "
            + "positionLiteral(142.1   64.1) , "
            + "positionLiteral(3.14   2.78) )))) ))) ')))))))) <EOF>)");

    // Rule GeographyLineString
    test.run("ODI?$filter=geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyLineString("
                + "geography' fullLineStringLiteral(sridLiteral(SRID = 0 ;) lineStringLiteral("
                + "LineString lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )))) '"
                + ")))))))) <EOF>)");

    // Rule GeographyMultiLineString
    test.run("ODI?$filter=geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyMultilineString("
                + "geography' fullMultilineStringLiteral(sridLiteral(SRID = 0 ;) multilineStringLiteral("
                + "MultiLineString ( "
                + "lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )) , "
                + "lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )) ))) '"
                + ")))))))) <EOF>)");

    // Rule GeographyMultiPoint
    test.run("ODI?$filter=geography'SRID=0;MultiPoint()'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyMultipoint("
                + "geography' fullMultipointLiteral(sridLiteral(SRID = 0 ;) multipointLiteral("
                + "MultiPoint ( ))) ')))))))) <EOF>)");
    // Rule GeographyMultiPoint
    test.run("ODI?$filter=geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyMultipoint("
                + "geography' fullMultipointLiteral(sridLiteral(SRID = 0 ;) multipointLiteral("
                + "MultiPoint ( "
                + "pointData(( positionLiteral(142.1   64.1) )) , "
                + "pointData(( positionLiteral(1   2) )) ))) ')))))))) <EOF>)");
    // Rule GeographyMultiPolygon
    test.run("ODI?$filter=geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyMultipolygon("
                + "geography' fullmultipolygonLiteral(sridLiteral(SRID = 0 ;) multipolygonLiteral("
                + "MultiPolygon ( polygonData(( "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(1   1) )) , "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(2   2) , "
                + "positionLiteral(3   3) , positionLiteral(1   1) )) )) ))) ')))))))) <EOF>)");
    // Rule GeographyPoint
    test.run("ODI?$filter=geography'SRID=0;Point(142.1 64.1)'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyPoint("
                + "geography' fullpointLiteral(sridLiteral(SRID = 0 ;) pointLiteral("
                + "Point pointData(( positionLiteral(142.1   64.1) )))) ')))))))) <EOF>)");
    // Rule GeographyPolygon
    test.run("ODI?$filter=geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geographyPolygon("
                + "geography' fullPolygonLiteral(sridLiteral(SRID = 0 ;) polygonLiteral("
                + "Polygon polygonData(( "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(1   1) )) , "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(2   2) , "
                + "positionLiteral(3   3) , positionLiteral(1   1) )) )))) ')))))))) <EOF>)");
    // Rule GeometryCollection
    test.run("ODI?$filter=geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryCollection("
                + "geometry' fullCollectionLiteral(sridLiteral(SRID = 0 ;) collectionLiteral("
                + "Collection ( geoLiteral(lineStringLiteral(LineString lineStringData(( "
                + "positionLiteral(142.1   64.1) , "
                + "positionLiteral(3.14   2.78) )))) ))) ')))))))) <EOF>)");
    // Rule GeometryLineString
    test.run("ODI?$filter=geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryLineString("
                + "geometry' fullLineStringLiteral(sridLiteral(SRID = 0 ;) lineStringLiteral("
                + "LineString lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )))) '"
                + ")))))))) <EOF>)");
    // Rule GeometryMultiLineString
    test.run("ODI?$filter=geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryMultilineString("
                + "geometry' fullMultilineStringLiteral(sridLiteral(SRID = 0 ;) multilineStringLiteral("
                + "MultiLineString ( "
                + "lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )) , "
                + "lineStringData(( positionLiteral(142.1   64.1) , positionLiteral(3.14   2.78) )) ))) '"
                + ")))))))) <EOF>)");
    // Rule GeometryMultiPoint
    test.run("ODI?$filter=geometry'SRID=0;MultiPoint()'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryMultipoint("
                + "geometry' fullMultipointLiteral(sridLiteral(SRID = 0 ;) multipointLiteral(MultiPoint ( ))) '"
                + ")))))))) <EOF>)");
    // Rule GeometryMultiPoint
    test.run("ODI?$filter=geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryMultipoint("
                + "geometry' fullMultipointLiteral(sridLiteral(SRID = 0 ;) "
                + "multipointLiteral(MultiPoint ( "
                + "pointData(( positionLiteral(142.1   64.1) )) , "
                + "pointData(( positionLiteral(1   2) )) ))) ')))))))) <EOF>)");
    // Rule GeometryMultiPolygon
    test.run("ODI?$filter=geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryMultipolygon("
                + "geometry' fullmultipolygonLiteral(sridLiteral(SRID = 0 ;) "
                + "multipolygonLiteral(MultiPolygon ( polygonData(( "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(1   1) )) , "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(2   2) , "
                + "positionLiteral(3   3) , positionLiteral(1   1) )) )) ))) ')))))))) <EOF>)");
    // Rule GeometryPoint
    test.run("ODI?$filter=geometry'SRID=0;Point(142.1 64.1)'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryPoint("
                + "geometry' fullpointLiteral(sridLiteral(SRID = 0 ;) pointLiteral("
                + "Point pointData(( positionLiteral(142.1   64.1) )))) ')))))))) <EOF>)");
    // Rule GeometryPolygon
    test.run("ODI?$filter=geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'")
        .isText(
            "odataRelativeUriEOF(odataRelativeUri(resourcePath(pathSegments(pathSegment("
                + "odataIdentifier(ODI)))) ? queryOptions(queryOption(systemQueryOption("
                + "filter($filter = commonExpr(primitiveLiteral(geometryPolygon("
                + "geometry' fullPolygonLiteral(sridLiteral(SRID = 0 ;) polygonLiteral("
                + "Polygon polygonData(( "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(1   1) )) , "
                + "ringLiteral(( positionLiteral(1   1) , positionLiteral(2   2) , "
                + "positionLiteral(3   3) , positionLiteral(1   1) )) )))) ')))))))) <EOF>)");

    //
    /*
     * test.runTest("1");
     * test.aFC().aCS().runTest("1*2");
     * test.runTest("1+2");
     * test.runTest("1+2*3");
     */

    // Parsing expression required in some cases a FullContextParsing and a report of a ContextSensitivity is fine

    // Test commonExpr - parenthesis
    test.aFC().aCS().run("ODI?$filter=(1) mul 2");
    test.aFC().aCS().run("ODI?$filter=(1 add 2)");
    test.aFC().aCS().run("ODI?$filter=1 mul (2 add 3)");

    // Test commonExpr - methodCallExpr
    test.run("ODI?$filter=indexof('ABCXYZ','CXY')");
    test.run("ODI?$filter=tolower('ABC')");
    test.run("ODI?$filter=toupper('ABC')");
    test.run("ODI?$filter=trim('%20%20%20ABC%20%20%20')");
    test.run("ODI?$filter=substring('ABC',1)");
    test.run("ODI?$filter=substring('ABC',1,2)");
    test.run("ODI?$filter=concat('ABC','XYZ')");
    test.run("ODI?$filter=length('ABC')");
    test.run("ODI?$filter=year(BirthDate)");
    test.run("ODI?$filter=month(BirthDate)");
    test.run("ODI?$filter=day(BirthDate)");
    test.run("ODI?$filter=hour(BirthDate)");
    test.run("ODI?$filter=minute(BirthDate)");
    test.run("ODI?$filter=second(BirthDate)");
    test.run("ODI?$filter=fractionalseconds(BirthDate)");
    test.run("ODI?$filter=totalseconds(duration'PT67S')");
    test.run("ODI?$filter=date(datetimeoffset'2013-11-15T13:35Z')");
    test.run("ODI?$filter=time(datetimeoffset'2013-11-15T13:35Z')");
    test.run("ODI?$filter=round(12.34)");
    test.run("ODI?$filter=floor(12.34)");
    test.run("ODI?$filter=ceiling(12.34)");
    test.run("ODI?$filter=geo.distance(geometry'SRID=0;Point(142.1 64.1)',geometry'SRID=0;Point(142.1 64.1)')");
    test.run("ODI?$filter=geo.geoLength(geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)')");
    test.run("ODI?$filter=totalOffsetMinutes(datetimeoffset'2013-11-15T13:35Z')");
    test.run("ODI?$filter=mindatetime()");
    test.run("ODI?$filter=maxdatetime()");
    test.run("ODI?$filter=now()");
    //from boolean
    test.run("ODI?$filter=isof(Model.Employee)");
    test.run("ODI?$filter=isof(ODI,Model.Employee)");
    test.run("ODI?$filter=cast(Model.Employee)");
    test.run("ODI?$filter=cast(ODI,Model.Employee)");
    test.run("ODI?$filter=endswith('ABCXYZ','YZ')");
    test.run("ODI?$filter=startswith('ABCXYZ','YZ')");
    test.run("ODI?$filter=contains('ABCXYZ','YZ')");
    test.run("ODI?$filter=geo.intersects("
        + "geometry'SRID=0;Point(142.1 64.1)',"
        + "geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))')");
    
    // Test commonExpr - unary
    test.run("ODI?$filter=true");
    

    // Test commonExpr - member
    test.run("ODI?$filter=ODI");

    // Test commonExpr - mathematical
    test.aFC().aCS().run("ODI?$filter=1 mul 2");
    test.aFC().aCS().run("ODI?$filter=1 div 2");
    test.aFC().aCS().run("ODI?$filter=1 mod 2");
    test.aFC().aCS().run("ODI?$filter=1 add 2");
    test.aFC().aCS().run("ODI?$filter=1 sub 2");
    test.aFC().aCS().run("ODI?$filter=1 gt 2");
    test.aFC().aCS().run("ODI?$filter=1 ge 2");
    test.aFC().aCS().run("ODI?$filter=1 lt 2");
    test.aFC().aCS().run("ODI?$filter=1 le 2");
    test.aFC().aCS().run("ODI?$filter=ODI isof Model.Employee"); // TODO fix 1 and 2 to proper values
    test.aFC().aCS().run("ODI?$filter=true and false");
    test.aFC().aCS().run("ODI?$filter=true or false");

    // Test commonExpr - $root
    test.run("ODI?$filter=$root/ODI");
    
    // Test concatenated parenthesis
    test.run("ODI?$filter=not true");
    
    
    // Test operator precedence
    test.aFC().aCS().run("ODI?$filter=1 mul (2 add 3)");
  }
  // ;------------------------------------------------------------------------------
  // ; 2. Query Options
  // ;------------------------------------------------------------------------------

  // ;------------------------------------------------------------------------------
  // ; 4. Expressions
  // ;------------------------------------------------------------------------------

  // ;------------------------------------------------------------------------------
  // ; 5. JSON format for function parameters
  // ;------------------------------------------------------------------------------

  // ;------------------------------------------------------------------------------
  // ; 6. Names and identifiers
  // ;------------------------------------------------------------------------------

  // ;------------------------------------------------------------------------------
  // ; 7. Literal Data Values
  // ;------------------------------------------------------------------------------

  // ;------------------------------------------------------------------------------
  // ; 0. misc
  // ;------------------------------------------------------------------------------

}
